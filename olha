#!/usr/bin/env poetry run python3
import glob
import json
import sys
from typing import Any, List
import openai
import os
from uuid import uuid4

openai.api_key = os.environ["OPEN_API_KEY"]

base_prompt = [
    {
        "role": "system",
        "content": "you are a CLI bot helper that converts natural language prompts into the corresponding MacOS CLI command. Don't give any explanations and just output the command. If instead I give you command you should respond with an explanation of what it does.",
        # "content": "You are an expert mathematics and programming assistant. When asked a maths question you should respond in the most accurate way possible and display step by step instructions on how the solution was obtained. When presented with a programming question you should output code samples in markdown format for easy reading.",
    },
]


def generateCompletion(
    prompt: str, history: List[dict[str, Any]], log: bool = False
) -> str:
    history.append({"role": "user", "content": prompt})
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=base_prompt + history,
        stream=True,
    )
    message = {}
    for chunk in response:
        delta = chunk["choices"][0]["delta"]  # type: ignore
        if "role" in delta:
            message = {**message, **delta}
        if "content" in delta:
            if log:
                print(delta["content"], end="")
            message = {
                **message,
                "content": message.get("content", "") + delta["content"],
            }

    history.append(message)
    if log:
        print()
    return message["content"]


history_files = glob.glob("/tmp/history_*")
temp_filename = (
    history_files[0] if len(history_files) > 0 else f"/tmp/history_{uuid4()}"
)

history = []

if os.path.exists(temp_filename):
    with open(temp_filename, "r") as file:
        history = json.load(file)

if sys.argv[1] == "--purge":
    files_to_delete = glob.glob("/tmp/history_*")
    for file in files_to_delete:
        os.remove(file)
elif sys.argv[1] == "--chat":
    while True:
        prompt = input("> ")
        if prompt.lower() == "exit":
            break
        generateCompletion(prompt, history, log=True)
elif sys.argv[1] == "--exec":
    prompt = " ".join(sys.argv[2:])
    cmd = generateCompletion(prompt, history).replace("`", '"')
    if "rm" in cmd:
        print("Dangerous command:", cmd)
    else:
        os.system(cmd)
else:
    prompt = " ".join(sys.argv[2:])
    generateCompletion(prompt, history, log=True)

with open(temp_filename, "w") as file:
    json.dump(history[-10:], file)
